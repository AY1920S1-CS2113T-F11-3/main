{"receivedDateTime":"2019-10-24T08:39:02Z","subject":"CG2271 Lab 3 QnA","@odata.etag":"W/\"CQAAABYAAAAdYQpmLnggSLqRTPf5d3WKAAFA8HK4\"","from":{"emailAddress":{"address":"e0031944@u.nus.edu","name":"ERIC LOH"}},"id":"AAMkADdlMWIxZjIxLTM2MzItNGM4ZC05MzM2LWVkM2Y3ZTgzZjhlYwBGAAAAAAAKOW1qChwVQ7G8kcDZ0iuVBwAdYQpmLnggSLqRTPf5d3WKAAAAAAEMAAAdYQpmLnggSLqRTPf5d3WKAAFBMAkiAAA=","body":{"contentType":"html","content":"<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta content=\"text/html; charset=utf-8\">\r\n<\/head>\r\n<body>\r\n<p>Hi guys,<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Sorry for not letting you know the answers on the spot :(&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>When will vTaskDelay() fail to give a periodic task?&nbsp;<\/strong><\/p>\r\n<p>If the task is preempted \u2014 the code path is no longer similar every cycle, and vTaskDelay() would falsely give a period longer than desired.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Say we want to make a 10s period task. t is the time before running the function.&nbsp;<\/p>\r\n<p>for(;;)&nbsp;<\/p>\r\n<p>{<\/p>\r\n<p>execution(); //t = 1<\/p>\r\n<p>execution(); //t = 2<\/p>\r\n<p>execution(); //t = 3<\/p>\r\n<p>vTaskDelay(7 seconds);&nbsp;<\/p>\r\n<p>}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>If there is preemption,<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>for(;;)&nbsp;<\/p>\r\n<p>{<\/p>\r\n<p>execution(); //t = 1<\/p>\r\n<p>execution(); //t = 2 &nbsp; &nbsp; &nbsp; &lt;- PREEMPTION, and returns after some time<\/p>\r\n<p>execution(); //t = 5&nbsp; &nbsp; &nbsp; &nbsp;<\/p>\r\n<p>vTaskDelay(7 seconds);&nbsp;<\/p>\r\n<p>}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>The period is no longer right.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Why are we using&nbsp; myDelay() instead of vTaskDelayUntil()?<\/strong><\/p>\r\n<p><strong>myDelay() does not put the task into blocked mode and keeps it in running mode.&nbsp;<\/strong><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>for(;;){<\/p>\r\n<p>&nbsp; &nbsp; while(count &lt; TASK1_CPUTIME){&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; digitalWrite(LED6_PIN, HIGH);<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; myDelay(50); &nbsp; &lt;- LOWER PRIORITY TASKS CAN\u2019T RUN&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; digitalWrite(LED6_PIN, LOW);<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; myDelay(50);<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; count &#43;= 100;&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; }&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; vTaskDelayUntil(&amp;currTicks, TASK1_PERIOD);<\/p>\r\n<p>}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>If instead you use vTaskDelayUntil() or vTaskDelay(), it will put the task into blocked mode, giving lower priority task a chance to run<\/strong><\/p>\r\n<p>for(;;){<\/p>\r\n<p>&nbsp; &nbsp; while(count &lt; TASK1_CPUTIME){&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; digitalWrite(LED6_PIN, HIGH);<\/p>\r\n<p>&nbsp; &nbsp; vTaskDelayUntil(&amp;currTicks, TASK1_PERIOD);&nbsp; &nbsp; &lt;- TASK IS PUT INTO BLOCKED MODE, LOW PRIORITY TASK *MIGHT* TAKE OVER IF THERE ARE NO RUNNING TASK<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; digitalWrite(LED6_PIN, LOW);<\/p>\r\n<p>&nbsp; &nbsp; vTaskDelayUntil(&amp;currTicks, TASK1_PERIOD);<\/p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; count &#43;= 100;&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; }&nbsp;<\/p>\r\n<p>&nbsp; &nbsp; vTaskDelayUntil(&amp;currTicks, TASK1_PERIOD);<\/p>\r\n<p>}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Tell me the state transitions of a task in FreeRTOS<\/strong><\/p>\r\n<p>Most of you got this correct. Some of you incorrectly said that the task goes from blocked to running, when it should be from blocked to ready.&nbsp; Also myDelay() does not put the task to blocked mode.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Let me know if you still have any questions.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Regards,<\/p>\r\n<p>Eric<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/body>\r\n<\/html>\r\n"}}